.confetti-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9999;
    overflow: hidden;
}

.confetti {
    position: absolute;
    transform-origin: center;
    animation: confetti-burst 4s ease-out forwards, confetti-swing 1s ease-in-out infinite alternate;
}

// Vibrant colors inspired by Canvas Confetti
$confetti-colors: (
    #ff5555, // Red
    #ffaa00, // Orange
    #55ff55, // Green
    #5555ff, // Blue
    #ff55ff, // Pink
    #ffff55, // Yellow
    #00ffff, // Cyan
    #ff99cc, // Light Pink
    #66ff66, // Light Green
    #ffcc00  // Gold
);

// Predefined shape variations with more variety
$shapes: (
    (width: 12px, height: 18px, border-radius: 0), // Rectangle
    (width: 14px, height: 14px, border-radius: 50%), // Circle
    (width: 10px, height: 10px, border-radius: 0), // Square
    (width: 8px, height: 16px, border-radius: 2px), // Thin Rectangle
    (width: 16px, height: 16px, border-radius: 50%), // Large Circle
    (width: 12px, height: 12px, clip-path: polygon(50% 0%, 0% 100%, 100% 100%)), // Triangle
    (width: 14px, height: 14px, border-radius: 0) // Large Square
);

// Generate varied confetti pieces
@for $i from 1 through 150 {
    .confetti-#{$i} {
        // Wider burst area (pseudo-random positioning across the screen)
        --position-x: #{$i * 7 % 100 - 50}; // Spread between -50% and 50%
        --position-y: #{$i * 11 % 40 - 20}; // Start between -20% and 20% from top
        left: calc(50% + var(--position-x) * 1%);
        top: calc(0% + var(--position-y) * 1%);

        // Select shape
        $shape-index: ($i % length($shapes)) + 1;
        $shape: nth($shapes, $shape-index);
        width: map-get($shape, width);
        height: map-get($shape, height);
        @if map-has-key($shape, border-radius) {
            border-radius: map-get($shape, border-radius);
        }
        @if map-has-key($shape, clip-path) {
            clip-path: map-get($shape, clip-path);
        }

        // Select color
        background-color: nth($confetti-colors, ($i % length($confetti-colors)) + 1);

        // Animation properties
        opacity: #{0.7 + ($i % 3) * 0.1}; // Vary opacity between 0.7 and 1.0
        animation-delay: #{$i * 0.01}s; // Incremental delay up to 1.5s
        animation-duration: #{3 + ($i % 4) * 0.5}s; // Duration between 3–5s
        transform: rotate(#{$i * 137.5 % 360}deg); // Pseudo-random rotation

        // Trajectory with wider spread
        --angle: #{$i * 137.5 % 360}; // Golden angle for even distribution
        --distance: #{30 + ($i % 50)}; // Distance between 30–79 vw/vh
        --translate-x: #{cos(var(--angle) * 3.14159 / 180) * var(--distance)}vw;
        --translate-y: #{sin(var(--angle) * 3.14159 / 180) * var(--distance)}vh;

        // Vary scale for more depth
        --scale: #{0.8 + ($i % 5) * 0.1}; // Scale between 0.8 and 1.2
    }
}

// Burst animation with scatter, fall, and fade
@keyframes confetti-burst {
    0% {
        transform: translate(0, 0) rotate(0deg) scale(var(--scale));
        opacity: 0.9;
    }
    50% {
        transform: translate(var(--translate-x), var(--translate-y)) rotate(360deg) scale(calc(var(--scale) * 1.3));
        opacity: 1;
    }
    100% {
        transform: translate(calc(var(--translate-x) * 1.2), calc(var(--translate-y) * 1.2 + 100vh)) rotate(720deg) scale(calc(var(--scale) * 0.5));
        opacity: 0;
    }
}

// Add a swinging motion for realism
@keyframes confetti-swing {
    0% {
        transform: rotate(-10deg);
    }
    100% {
        transform: rotate(10deg);
    }
}