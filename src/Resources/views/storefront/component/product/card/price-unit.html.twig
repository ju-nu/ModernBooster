{% sw_extends '@Storefront/storefront/component/product/card/price-unit.html.twig' %}

{% block component_product_box_price_info %}
	{% set cheapest = product.calculatedCheapestPrice %}
	{% set real = product.calculatedPrice %}
	{% if product.calculatedPrices.count > 0 %}
		{% set real = product.calculatedPrices.last %}
	{% endif %}
	{% set referencePrice = real.referencePrice %}
	{% set displayFrom = product.calculatedPrices.count > 1 %}
	{% set displayParent = product.variantListingConfig.displayParent and product.parentId === null %}
	{% if displayParent %}
		{% set displayFromVariants = displayParent and real.unitPrice !== cheapest.unitPrice %}
		{% set real = cheapest %}
		{% set totalVariants = product.cheapestPriceContainer.value %}
		{% set hasDifferentPrice = totalVariants|filter(variant => variant.default != null)|length > 0 %}
	{% endif %}
	{% set isCustomStepsActive = product.customFields.junu_products_steps_active %}
	{% set hasCustomProducts = product.customFields.junu_products_steps_products_1 or product.customFields.junu_products_steps_products_2 or product.customFields.junu_products_steps_products_3 %}

	{% if isCustomStepsActive and hasCustomProducts %}
		<div class="product-price-info">
			{% block component_product_box_price_unit %}
				<p class="product-price-unit">
					{% if isCustomStepsActive and hasCustomProducts %}
						<section class="junu-product-steps" itemscope itemtype="http://schema.org/Product">
							<meta itemprop="name" content="{{ product.translated.name }}">
							<meta itemprop="sku" content="{{ product.productNumber }}">
							<div class="pricing-steps-grid">
								{% set steps = [
                                {
                                    'productId': product.customFields.junu_products_steps_products_1,
                                    'selector': 'step_1',
                                    'index': 1,
                                    'badge': null
                                },
                                {
                                    'productId': product.customFields.junu_products_steps_products_2,
                                    'selector': 'step_2',
                                    'index': 2,
                                    'badge': 'recommended'
                                },
                                {
                                    'productId': product.customFields.junu_products_steps_products_3,
                                    'selector': 'step_3',
                                    'index': 3,
                                    'badge': 'best-value'
                                }
                            ] %}
								{% set stepData = [] %}
								{% for step in steps %}
									{% if step.productId %}
										{% set productData = searchProduct(step.productId, context) %}
										{% if productData and productData.product %}
											{% set referencedProduct = productData.product %}
											{% set productUrl = productData.productUrl %}
											{% set calculatedPrice = referencedProduct.calculatedPrice %}
											{% set unitPrice = calculatedPrice.unitPrice|currency %}
											{% set listPrice = calculatedPrice.listPrice ? calculatedPrice.listPrice.price|currency : null %}
											{% set discount = calculatedPrice.listPrice and calculatedPrice.listPrice.price > 0 ? ((calculatedPrice.listPrice.price - calculatedPrice.unitPrice) / calculatedPrice.listPrice.price * 100)|round : null %}
											{% set discountText = discount ? "#{discount}% Rabatt" : null %}
											{% set referencePriceVal = calculatedPrice.referencePrice ? calculatedPrice.referencePrice.price|currency : null %}
											{% set referenceUnit = calculatedPrice.referencePrice ? calculatedPrice.referencePrice.referenceUnit : null %}
											{% set unitName = referencedProduct.unit ? referencedProduct.unit.shortCode : null %}
											{% set basePriceText = referencePriceVal and referenceUnit and unitName ? "(#{referencePriceVal} / #{referenceUnit} #{unitName})" : null %}
											{% set stepData = stepData|merge([{
                                            unitPrice: unitPrice,
                                            listPrice: listPrice,
                                            discountText: discountText,
                                            basePriceText: basePriceText,
                                            productId: referencedProduct.id,
                                            productUrl: productUrl,
                                            quantity: step.index
                                        }]) %}
											<div class="pricing-step {{ referencedProduct.id == product.id ? 'selected' : '' }}" data-product-id="{{ referencedProduct.id }}" data-step-index="{{ stepData|length - 1 }}" data-quantity="{{ step.index }}" data-unit-price="{{ unitPrice }}" role="button" aria-label="Select {{ step.index }}x {{ step.badge ? step.badge : 'package' }} for {{ unitPrice }}" tabindex="0" style="cursor: pointer;" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
												<meta itemprop="price" content="{{ calculatedPrice.unitPrice }}">
												<meta itemprop="priceCurrency" content="{{ context.currency.isoCode }}">
												<meta itemprop="itemCondition" content="http://schema.org/NewCondition">
												<link itemprop="availability" href="http://schema.org/InStock">
												{% if step.badge == 'recommended' %}
													<strong class="badge recommended">-{{ discount }}%</strong>
												{% elseif step.badge == 'best-value' %}
													<strong class="badge best-value">-{{ discount }}%</strong>
												{% endif %}
												<div class="quantity">
													{{ step.index }}x
												</div>
												<div class="unit-price">
													<span class="price" itemprop="price">{{ (calculatedPrice.unitPrice / step.index) | currency }}</span>
													{% if listPrice %}
														<span class="old-price">/
															{% if referencedProduct.minPurchase > 1 and referencedProduct.packUnitPlural %}
																{{ referencedProduct.packUnitPlural }}
															{% elseif referencedProduct.packUnit %}
																{{ referencedProduct.packUnit }}
															{% else %}
																Stück
															{% endif %}
														</span>
													{% endif %}
												</div>
											</div>
										{% endif %}
									{% endif %}
								{% endfor %}
							</div>
							<script>
								document.addEventListener('DOMContentLoaded', () => {
const pricingSteps = document.querySelectorAll('.pricing-step');

pricingSteps.forEach(step => {
const handleInteraction = (event) => {
event.preventDefault();
event.stopPropagation();

const wrapper = step.closest('.card-body');
const form = wrapper ?. querySelector('.buy-widget');
const buyButton = form ?. querySelector('.btn-buy');

if (! form) { /*                 console.error('Form not found for pricing step:', step); */
return;
}

// Remove selection from all siblings in this card only
wrapper.querySelectorAll('.pricing-step').forEach(s => s.classList.remove('selected'));
step.classList.add('selected');

// Animate
step.classList.remove('clicked');
void step.offsetHeight;
step.classList.add('clicked');

// Update form inputs
const productId = step.dataset.productId;
const quantity = parseInt(step.dataset.quantity);

// Update product-id-input
const productIdInput = form.querySelector('.product-id-input');
if (productIdInput) {
productIdInput.value = productId;
productIdInput.name = `lineItems[${productId}][id]`;
}

// Update referenced-id-input
const referencedIdInput = form.querySelector('.referenced-id-input');
if (referencedIdInput) {
referencedIdInput.value = productId;
referencedIdInput.name = `lineItems[${productId}][referencedId]`;
}

// Update type-input
const typeInput = form.querySelector('.type-input');
if (typeInput) {
typeInput.value = 'product';
typeInput.name = `lineItems[${productId}][type]`;
}

// Update stackable-input
const stackableInput = form.querySelector('.stackable-input');
if (stackableInput) {
stackableInput.value = '1';
stackableInput.name = `lineItems[${productId}][stackable]`;
}

// Update removable-input
const removableInput = form.querySelector('.removable-input');
if (removableInput) {
removableInput.value = '1';
removableInput.name = `lineItems[${productId}][removable]`;
}

// Update quantity-input
const quantityInput = form.querySelector('.quantity-input');
if (quantityInput) {
quantityInput.value = quantity;
quantityInput.name = `lineItems[${productId}][quantity]`;
}

// Update redirectParameters
const redirectParametersInput = form.querySelector('input[name="redirectParameters"]');
if (redirectParametersInput) {
redirectParametersInput.value = JSON.stringify({productId: productId});
}

// Update form data-product-id
form.dataset.productId = productId;

// Update bit-gtag fields
const bitGtagIdInput = form.querySelector('input[name="bit-gtag-id"]');
if (bitGtagIdInput) 
bitGtagIdInput.value = productId;



const bitGtagPriceInput = form.querySelector('input[name="bit-gtag-price"]');
if (bitGtagPriceInput) 
bitGtagPriceInput.value = step.dataset.unitPrice.replace(' €', '').replace(',', '.');



const bitGtagUnitPriceInput = form.querySelector('input[name="bit-gtag-unit_price"]');
if (bitGtagUnitPriceInput) 
bitGtagUnitPriceInput.value = step.dataset.unitPrice.replace(' €', '').replace(',', '.');



const bitGtagQuantityInput = form.querySelector('input[name="bit-gtag-quantity"]');
if (bitGtagQuantityInput) 
bitGtagQuantityInput.value = quantity;



// Update buy button text
if (buyButton) {
buyButton.innerHTML = `In den Warenkorb`;
}

/*             // Debug form data
            console.log('Form updated with:', {
                productId: productIdInput?.value,
                referencedId: referencedIdInput?.value,
                type: typeInput?.value,
                stackable: stackableInput?.value,
                removable: removableInput?.value,
                quantity: quantityInput?.value,
                redirectParameters: redirectParametersInput?.value
            }); */
};

step.addEventListener('click', handleInteraction);
step.addEventListener('touchstart', (event) => {
handleInteraction(event);
});

step.addEventListener('keydown', (event) => {
if (event.key === 'Enter' || event.key === ' ') {
event.preventDefault();
handleInteraction(event);
}
});
});

// Initialize selected step
pricingSteps.forEach(step => {
if (step.classList.contains('selected')) {
const event = new Event('click');
step.dispatchEvent(event);
}
});
});
							</script>
						</section>
					{% else %}
						{{ parent() }}
					{% endif %}
				</p>
			{% endblock %}
		</div>
	{% else %}
		{{ parent() }}
	{% endif %}
{% endblock %}
